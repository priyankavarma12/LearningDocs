create table customer(id number(6),name varchar2(30), primary key (id));
insert into customer (id,name) values(111,'abc');
insert into customer (id,name) values(222,'bca');
insert into customer (id,name) values(33,'cde');
select *from customer;
alter table customer add sal decimal(10,2);
update customer set sal = 1000 where id = 111;
update customer set sal = 2000 where id = 222;
update customer set sal = 3000 where id = 33;
DESC customer;
ALTER TABLE customer modify name not null;
update customer set id = 333 where id = 33;
alter table customer add company VARCHAR2(20) NOT NULL;
alter table customer modify company not null;
alter table customer modify (company DEFAULT 'EPAM');

------------------------- Adding two numbers -----------------------
DECLARE 
    a integer:=10;
    b integer:=20;
    c integer;
    f real;
BEGIN
    c := a+b;
    dbms_output.put_line('Value of c : '|| c);
    f:=70.0/3.0;
    dbms_output.put_line('Value of f : '|| f);
END;


set serveroutput on;

----------------table data fetching of row ---------------------------

declare
    c_id customer.id%Type := 111;
    c_name customer.name%Type := 'abc';
Begin
    select id, name into c_id, c_name from customer
    where id = c_id;
    dbms_output.put_line('Customer   '|| c_name || '   with  ' || c_id );
end;
    
-------------------------IF THEN ELSE Condition statements ----------------------------
DECLARE 
    name VARCHAR2(20);
    company VARCHAR2(30);
    introduction CLOB;
    choice char(1);
BEGIN
    name := 'John smith';
    company := 'EPAM';
    introduction := 'Hello! I am john smith from EPAM';
    choice := 'Y';
    IF choice = 'Y' THEN
        dbms_output.put_line(name);
        dbms_output.put_line(company);
        dbms_output.put_line(introduction);
    ELSE 
        DBMS_OUTPUT.PUT_LINE('Invalid input');
    END IF;
END;
/

------------------ LOOPS ------------------------------------------
DECLARE
    i NUMBER(1);
    j NUMERIC;
BEGIN
     FOR i IN 1..3 LOOP
        FOR j IN 1..3 LOOP
             DBMS_OUTPUT.PUT_LINE('i is  '|| i || ' j is ' ||j);
        END LOOP;
     END LOOP;
END;


-------------- Strings methods --------------
DECLARE
    greetings VARCHAR2(20) := 'hello world';
BEGIN
    DBMS_OUTPUT.PUT_LINE('String is upper case :: '|| UPPER(greetings));
    DBMS_OUTPUT.PUT_LINE('String is camel case :: '|| INITCAP(greetings));
    DBMS_OUTPUT.PUT_LINE('String is substring :: '|| SUBSTR(greetings, 7,5));
END;

--------------Arrays -------------------
DECLARE
    TYPE namearray IS VARRAY(5) OF VARCHAR2(20);
    TYPE grades IS VARRAY(5)  OF INTEGER;
    names namearray;
    marks grades;
    total integer;
BEGIN
    names := namearray('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz');
    marks := grades(98, 97, 78, 87, 92);
    total := names.count;
    DBMS_OUTPUT.PUT_LINE('Total  '|| total || ' Students');
    FOR i IN 1..total LOOP
        DBMS_OUTPUT.PUT_LINE('Students : '|| names(i) ||'Marks : '||marks(i));
    END LOOP;     
END;


----------------find the min number -----------
DECLARE 
            a number;
            b number;
            c number;
PROCEDURE find_min
       (x IN number,y IN number, z OUT number) IS   
      BEGIN
        IF x < y THEN
            z := x;
        ELSE
            z := y;
        END IF;
    END;
BEGIN
        a := 23;
        b := 45;
        find_min(a,b,c);
        DBMS_OUTPUT.PUT_LINE('The min value among a, b, c is '|| c );
        
END;  

set SERVEROUTPUT ON;

----------- square root of number --------------
DECLARE  
 a number;
PROCEDURE square_root(x IN OUT number) IS
BEGIN
    x := x * x;
END;
BEGIN
    a := 20;
    square_root(a);
    DBMS_OUTPUT.PUT_LINE('The square root of 20 is ' || a);
END;
    

--------------------- FUNCTIONS -----------------
CREATE OR REPLACE FUNCTION totalCustomers
RETURN number IS
    total number(2) := 0;
BEGIN
    SELECT count(*) into total from customer;
    RETURN total;
END;

----- Calling a function in program -------------- 
DECLARE
    c number(2);
BEGIN
    c := totalcustomers();
    DBMS_OUTPUT.PUT_LINE('The total customers count is '|| c);
END;

----------------maximum value among a,b,c using functions ------------
DECLARE
    a number;
    b number;
    c number;
FUNCTION find_max(x IN number, y IN number)
RETURN number
IS
    z number;
BEGIN 
    IF x > y THEN
        z := x;
    ELSE
        z := y;
    END IF;
    RETURN z;
END;
BEGIN
    a := 23;
    b := 45;
    c := find_max(a,b);
    DBMS_OUTPUT.PUT_LINE('The max number is ' || c);
END;


-----------------Recursive function with factorial example---------------------
DECLARE
 num number;
 factorial number;
FUNCTION fact(x number)
RETURN number
IS
    f number;
BEGIN
    IF x=0 THEN
        f := 1;
    ELSE 
        f := x * fact(x-1);
    END IF;
    RETURN f;
END;
BEGIN
    num := 5;
    factorial := fact(num);
    DBMS_OUTPUT.PUT_LINE('The factorial of number is ' || factorial);
END;

----------------- Cursors ----------------
DECLARE 
    total_rows number(2);
BEGIN
    UPDATE customer
    SET sal = sal + 500;
    IF sql%notfound THEN
        DBMS_OUTPUT.PUT_LINE('No Customers selected ');
    ELSIF sql%found THEN
        total_rows := sql%rowcount;
        DBMS_OUTPUT.PUT_LINE( total_rows || ' Customers selected');
    END IF;
END;
/
---------------------- Cursor 1 by updating the company Implicit cursor -----------------
DECLARE
    total_col number(2);
BEGIN
    UPDATE customer
    SET company = 'EPAM';
    IF sql%notfound THEN
        DBMS_OUTPUT.PUT_LINE('No Customers selected ');
    ELSIF sql%found THEN
        total_col := sql%rowcount;
        DBMS_OUTPUT.PUT_LINE( total_col || ' Customers selected ');
    END IF;
END;

select *from customer;

------------- Explicit cusror --------------
DECLARE
    c_id customer.id%Type;
    c_name customer.name%Type;
CURSOR c_customer IS select id, name from customer; -----declaring cursor----
BEGIN
    open c_customer; --- open cursor -----
    loop
    fetch c_customer into c_id, c_name; -----Fetch cursor ----
        EXIT WHEN c_customer%notfound;
     dbms_output.put_line(c_id ||' ' || c_name );
    END LOOP;
    CLOSE c_customer; ---- close cursor -----
END;
   
----------- records in pl/sql ----------
---------------- table based record --------
DECLARE
    customer_rec customer%rowtype;
BEGIN
    SELECT * INTO customer_rec FROM customer WHERE id = 111;
    DBMS_OUTPUT.PUT_LINE('Customer id ::' || customer_rec.id);
    DBMS_OUTPUT.PUT_LINE('Customer name :: ' || customer_rec.name);
    DBMS_OUTPUT.PUT_LINE('Customer company :: ' || customer_rec.company);
END;


------------ exception using when and then ------------
DECLARE
    c_id customer.id%TYPE := 110;
    c_name customer.name%TYPE;
BEGIN
    SELECT id, name INTO c_id, c_name from customer WHERE id = c_id;
    DBMS_OUTPUT.PUT_LINE('Customer id : '|| c_id  ||' Customer name : ' || c_name);
EXCEPTION
      WHEN no_data_found THEN
        DBMS_OUTPUT.PUT_LINE('No such customer found');
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Errors');
END;


------ User defined exception -----
DECLARE 
    c_id customer.id%TYPE := &cc_id;
    c_name customer.name%TYPE;
    ex_invalid_id EXCEPTION;
BEGIN 
    IF c_id <0 THEN
        RAISE ex_invalid_id;
    ELSE
    SELECT ID, NAME into c_id, c_name FROM customer where id = c_id;
     DBMS_OUTPUT.PUT_LINE('Customer id : '|| c_id  ||' Customer name : ' || c_name);
    END IF;
EXCEPTION
    WHEN ex_invalid_id THEN
        DBMS_OUTPUT.PUT_LINE('id must be greater than zero !');
    WHEN no_data_found THEN 
        DBMS_OUTPUT.PUT_LINE('No such customers ');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error !!');
 END;
 
---------------- Triggers --------------
CREATE OR REPLACE TRIGGER display_sal_changes
BEFORE DELETE OR INSERT OR UPDATE ON customer
FOR EACH ROW 
WHEN (NEW.ID>0)
DECLARE  
    sal_diff NUMBER;
BEGIN 
    sal_diff := :New.sal - : Old.sal;
    DBMS_OUTPUT.PUT_LINE('New salary  '|| New.sal);
    DBMS_OUTPUT.PUT_LINE('Old salary  '|| Old.sal);
    DBMS_OUTPUT.PUT_LINE('Difference salary  '|| sal_diff);
END;

insert into customer (id,name,sal,company) values(444,'John',5500,'CTS');
insert into customer (id,name,sal,company) values(555,'Kin',6500,'TCS');
insert into customer (id,name, sal,company) values(666,'Ray',7500,'Wipro');

select *from customer;

select * from (select id, name, sal, company, rank() over (order by sal desc) as customer_rank from customer) where customer_rank<=2;

select id, name, sal, company from customer WHERE SAL IN (select MAX(sal) "Maximum" FROM customer);    

select * from (select sal from customer order by sal desc) where ROWNUM <= 3;

select *from (select id, name, sal,company, rank() over (order by sal desc) AS customer_rank from customer) where customer_rank <=2;  
